
what is hibernate association mapping with example in detailed

Please write in English language.
ChatGPT said:
ChatGPT
Hibernate Association Mapping Overview
Hibernate association mapping is a feature in Hibernate that allows you to define how entities (Java objects) are related to each other in a database. In a relational database, relationships between tables are typically defined using foreign keys. Hibernate provides a way to map these relationships to Java objects through association mappings. There are four main types of association mappings in Hibernate:

One-to-One
One-to-Many
Many-to-One
Many-to-Many
1. One-to-One Mapping
In a one-to-one relationship, one entity is associated with exactly one other entity. For example, consider two entities: User and UserProfile. Each User has one UserProfile.

Example:
User Entity:

java
Copy code
import javax.persistence.*;

@Entity
@Table(name = "users")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String username;

    @OneToOne(mappedBy = "user", cascade = CascadeType.ALL)
    private UserProfile userProfile;

    // Getters and Setters
}
UserProfile Entity:

java
Copy code
import javax.persistence.*;

@Entity
@Table(name = "user_profiles")
public class UserProfile {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String address;
    private String phoneNumber;

    @OneToOne
    @JoinColumn(name = "user_id")
    private User user;

    // Getters and Setters
}
Here, the User entity has a one-to-one relationship with the UserProfile entity. The @OneToOne annotation is used to define the relationship, and the mappedBy attribute in User indicates that UserProfile is the owner of the relationship.

2. One-to-Many Mapping
In a one-to-many relationship, one entity is associated with multiple instances of another entity. For example, a Department can have multiple Employees.

Example:
Department Entity:

java
Copy code
import javax.persistence.*;
import java.util.List;

@Entity
@Table(name = "departments")
public class Department {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    @OneToMany(mappedBy = "department", cascade = CascadeType.ALL)
    private List<Employee> employees;

    // Getters and Setters
}
Employee Entity:

java
Copy code
import javax.persistence.*;

@Entity
@Table(name = "employees")
public class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    @ManyToOne
    @JoinColumn(name = "department_id")
    private Department department;

    // Getters and Setters
}
Here, the Department entity has a one-to-many relationship with the Employee entity. The @OneToMany annotation is used in Department, while @ManyToOne is used in Employee to define the relationship.

3. Many-to-One Mapping
A many-to-one relationship is the inverse of a one-to-many relationship. It means that many entities are associated with one entity. The example above with Employee and Department is also a many-to-one relationship from the perspective of Employee.

4. Many-to-Many Mapping
In a many-to-many relationship, multiple entities are associated with multiple instances of another entity. For example, a Student can enroll in multiple Courses, and each Course can have multiple Students.

Example:
Student Entity:

java
Copy code
import javax.persistence.*;
import java.util.List;

@Entity
@Table(name = "students")
public class Student {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    @ManyToMany(cascade = CascadeType.ALL)
    @JoinTable(
        name = "student_course",
        joinColumns = @JoinColumn(name = "student_id"),
        inverseJoinColumns = @JoinColumn(name = "course_id")
    )
    private List<Course> courses;

    // Getters and Setters
}
Course Entity:

java
Copy code
import javax.persistence.*;
import java.util.List;

@Entity
@Table(name = "courses")
public class Course {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;

    @ManyToMany(mappedBy = "courses")
    private List<Student> students;

    // Getters and Setters
}
Here, the Student entity has a many-to-many relationship with the Course entity. The @ManyToMany annotation is used in both entities. The @JoinTable annotation is used to define the join table that stores the relationship between Student and Course.

Summary
One-to-One: One entity is related to one other entity.
One-to-Many: One entity is related to many other entities.
Many-to-One: Many entities are related to one other entity.
Many-to-Many: Many entities are related to many other entities.
Hibernate association mappings allow you to define these relationships and manage them within your application using annotations or XML configurations.